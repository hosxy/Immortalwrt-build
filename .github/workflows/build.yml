# This is a basic workflow to help you get started with Actions

name: ImmortalWRT Build

# Controls when the workflow will run
on:
  workflow_dispatch:
  release:
    types: [published]

env:
  URL: https://github.com/immortalwrt/immortalwrt
  VERSION: v24.10.2
  FIRMWARE_DIR: immortalwrt/bin/targets/x86/64
  

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: 检查服务器配置
        run: |
          echo "若分配的服务器性能不足，务必及时取消，重新运行！"
          echo -e "------------------------------- CPU信息 -------------------------------\n"
          echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
          echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo -e "------------------------------- 内存信息 -------------------------------\n"
          echo "已安装内存详细信息: "
          sudo lshw -short -C memory | grep GiB
          
      - name: 最大化磁盘空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          temp-reserve-mb: 100
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          
      - name: 初始化编译环境
        uses: actions/checkout@v4
       
      - name: 安装依赖
        run: |
          sudo apt purge firefox snap*
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install -y autoconf automake autopoint binutils build-essential bzip2 ccache clang cmake cpio curl flex gawk gettext git gperf intltool libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool llvm msmtp ninja-build p7zip p7zip-full patch pkgconf python3 squashfs-tools swig unzip vim wget xxd zlib1g-dev
          sudo apt autoremove
          sudo apt clean
          df -h
          
      #- name: 安装 Golang
      #  uses: actions/setup-go@v3
      #  with:
      #    go-version: 'stable'
    

      - name: 下载源码、更新 feeds
        run: |
          git clone -b ${{env.VERSION}} --single-branch --filter=blob:none ${{env.URL}}
          immortalwrt/scripts/feeds update -a
          immortalwrt/scripts/feeds install -a

      # 使 golang 编译的程序目标架构提升到 X86_64-V3
      # 使 Rust 编译的程序使用 O3 优化，目标架构提升到 tigerlake(11代intel，支持AVX512)
      - name: 为 golang 和 Rust 开启优化选项
        run: |
          sed -i s/'$(GO_AMD64)'/v3/g immortalwrt/feeds/packages/lang/golang/golang-package.mk
          sed -i s/CARGO_PROFILE_RELEASE_OPT_LEVEL=z/CARGO_PROFILE_RELEASE_OPT_LEVEL=3/g immortalwrt/feeds/packages/lang/rust/rust-values.mk
          sed -i s/'RUSTFLAGS="$(CARGO_RUSTFLAGS)"'/'RUSTFLAGS="$(CARGO_RUSTFLAGS) -Ctarget-cpu=tigerlake"'/g immortalwrt/feeds/packages/lang/rust/rust-values.mk
          
      # 开启缓存
      - uses: stupidloud/cachewrtbuild@main
        with:
          ccache: 'true'
          toolchain: 'true'
          mixkey: 'x64'
          prefix: 'immortalwrt'

      - name: 下载配置文件
        run: |
          cd immortalwrt
          make defconfig
          rm .config
          curl -L -o .config "https://raw.githubusercontent.com/hosxy/openwrt-build/refs/heads/master/config-x64"

      - name: 下载构建依赖
        run: |
          cd immortalwrt
          make download -j$(nproc)

      - name: 编译
        run: |
          cd immortalwrt
          make V=s -j$(nproc)
      
      - name: 检查磁盘空间
        run: df -h
        
      - uses: actions/upload-artifact@v4
        with:
          name: immortalwrt
          path: ${{env.FIRMWARE_DIR}}/*.img.gz

      - name: 上传至 release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{env.FIRMWARE_DIR}}/immortalwrt-x86-64-generic-squashfs-combined-efi.img.gz
            ${{env.FIRMWARE_DIR}}/immortalwrt-x86-64-generic-squashfs-rootfs.img.gz
            
            
            
        
          
